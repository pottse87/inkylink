"use strict";

const {
  test,
  expect
} = require('@playwright/test');
const fs = require('fs');
const {
  Client
} = require('pg');
test('Inkylink full pipeline + DB check', async ({
  page
}) => {
  const baseUrl = 'http://localhost:3000';

  // 1. Go to pricing page
  await page.goto(`${baseUrl}/pricing`);
  await expect(page.locator('h1')).toContainText('Inkylink');

  // 2. Click first "Order Now"
  await page.locator('text=Order Now').first().click();

  // 3. Confirmation page
  await expect(page).toHaveURL(/confirmation/);

  // 4. Continue to form
  await page.locator('text=Continue to Intake Form').click();

  // 5. Fill all inputs
  const inputs = page.locator('input[type="text"]');
  const count = await inputs.count();
  for (let i = 0; i < count; i++) {
    await inputs.nth(i).fill(`Sample answer ${i + 1}`);
  }

  // 6. Submit form
  await page.locator('text=Submit').click();

  // 7. Thank you page
  await expect(page).toHaveURL(/thankyou/);

  // 8. Verify local orders folder
  const ordersPath = './orders';
  if (!fs.existsSync(ordersPath)) throw new Error('❌ Orders folder not found');
  const files = fs.readdirSync(ordersPath);
  if (!files.length) throw new Error('❌ No order files found in orders folder');
  console.log('✅ Order saved locally:', files[files.length - 1]);

  // 9. Verify IDs have no hyphens
  const latestOrderPath = `${ordersPath}/${files[files.length - 1]}`;
  const orderData = JSON.parse(fs.readFileSync(latestOrderPath, 'utf8'));
  const idsWithHyphens = orderData.items.filter(item => item.id.includes('-'));
  if (idsWithHyphens.length > 0) {
    throw new Error(`❌ Found IDs with hyphens: ${idsWithHyphens.map(i => i.id).join(', ')}`);
  }
  console.log('✅ All IDs have spaces instead of hyphens');

  // 10. PostgreSQL DB verification
  const client = new Client({
    host: process.env.PGHOST,
    port: process.env.PGPORT,
    database: process.env.PGDATABASE,
    user: process.env.PGUSER,
    password: process.env.PGPASSWORD
  });
  try {
    await client.connect();
    const res = await client.query('SELECT order_id, submitted_at FROM orders ORDER BY submitted_at DESC LIMIT 1');
    if (res.rows.length === 0) {
      throw new Error('❌ No orders found in PostgreSQL');
    } else {
      console.log('✅ Latest order in PostgreSQL:', res.rows[0]);
    }
  } catch (err) {
    console.warn('⚠️ PostgreSQL check failed:', err.message);
  } finally {
    await client.end();
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0ZXN0IiwiZXhwZWN0IiwicmVxdWlyZSIsImZzIiwiQ2xpZW50IiwicGFnZSIsImJhc2VVcmwiLCJnb3RvIiwibG9jYXRvciIsInRvQ29udGFpblRleHQiLCJmaXJzdCIsImNsaWNrIiwidG9IYXZlVVJMIiwiaW5wdXRzIiwiY291bnQiLCJpIiwibnRoIiwiZmlsbCIsIm9yZGVyc1BhdGgiLCJleGlzdHNTeW5jIiwiRXJyb3IiLCJmaWxlcyIsInJlYWRkaXJTeW5jIiwibGVuZ3RoIiwiY29uc29sZSIsImxvZyIsImxhdGVzdE9yZGVyUGF0aCIsIm9yZGVyRGF0YSIsIkpTT04iLCJwYXJzZSIsInJlYWRGaWxlU3luYyIsImlkc1dpdGhIeXBoZW5zIiwiaXRlbXMiLCJmaWx0ZXIiLCJpdGVtIiwiaWQiLCJpbmNsdWRlcyIsIm1hcCIsImpvaW4iLCJjbGllbnQiLCJob3N0IiwicHJvY2VzcyIsImVudiIsIlBHSE9TVCIsInBvcnQiLCJQR1BPUlQiLCJkYXRhYmFzZSIsIlBHREFUQUJBU0UiLCJ1c2VyIiwiUEdVU0VSIiwicGFzc3dvcmQiLCJQR1BBU1NXT1JEIiwiY29ubmVjdCIsInJlcyIsInF1ZXJ5Iiwicm93cyIsImVyciIsIndhcm4iLCJtZXNzYWdlIiwiZW5kIl0sInNvdXJjZXMiOlsiaW5reWxpbmsuc3BlYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IHRlc3QsIGV4cGVjdCB9ID0gcmVxdWlyZSgnQHBsYXl3cmlnaHQvdGVzdCcpO1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XHJcbmNvbnN0IHsgQ2xpZW50IH0gPSByZXF1aXJlKCdwZycpO1xyXG5cclxudGVzdCgnSW5reWxpbmsgZnVsbCBwaXBlbGluZSArIERCIGNoZWNrJywgYXN5bmMgKHsgcGFnZSB9KSA9PiB7XHJcbiAgY29uc3QgYmFzZVVybCA9ICdodHRwOi8vbG9jYWxob3N0OjMwMDAnO1xyXG5cclxuICAvLyAxLiBHbyB0byBwcmljaW5nIHBhZ2VcclxuICBhd2FpdCBwYWdlLmdvdG8oYCR7YmFzZVVybH0vcHJpY2luZ2ApO1xyXG4gIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ2gxJykpLnRvQ29udGFpblRleHQoJ0lua3lsaW5rJyk7XHJcblxyXG4gIC8vIDIuIENsaWNrIGZpcnN0IFwiT3JkZXIgTm93XCJcclxuICBhd2FpdCBwYWdlLmxvY2F0b3IoJ3RleHQ9T3JkZXIgTm93JykuZmlyc3QoKS5jbGljaygpO1xyXG5cclxuICAvLyAzLiBDb25maXJtYXRpb24gcGFnZVxyXG4gIGF3YWl0IGV4cGVjdChwYWdlKS50b0hhdmVVUkwoL2NvbmZpcm1hdGlvbi8pO1xyXG5cclxuICAvLyA0LiBDb250aW51ZSB0byBmb3JtXHJcbiAgYXdhaXQgcGFnZS5sb2NhdG9yKCd0ZXh0PUNvbnRpbnVlIHRvIEludGFrZSBGb3JtJykuY2xpY2soKTtcclxuXHJcbiAgLy8gNS4gRmlsbCBhbGwgaW5wdXRzXHJcbiAgY29uc3QgaW5wdXRzID0gcGFnZS5sb2NhdG9yKCdpbnB1dFt0eXBlPVwidGV4dFwiXScpO1xyXG4gIGNvbnN0IGNvdW50ID0gYXdhaXQgaW5wdXRzLmNvdW50KCk7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICBhd2FpdCBpbnB1dHMubnRoKGkpLmZpbGwoYFNhbXBsZSBhbnN3ZXIgJHtpICsgMX1gKTtcclxuICB9XHJcblxyXG4gIC8vIDYuIFN1Ym1pdCBmb3JtXHJcbiAgYXdhaXQgcGFnZS5sb2NhdG9yKCd0ZXh0PVN1Ym1pdCcpLmNsaWNrKCk7XHJcblxyXG4gIC8vIDcuIFRoYW5rIHlvdSBwYWdlXHJcbiAgYXdhaXQgZXhwZWN0KHBhZ2UpLnRvSGF2ZVVSTCgvdGhhbmt5b3UvKTtcclxuXHJcbiAgLy8gOC4gVmVyaWZ5IGxvY2FsIG9yZGVycyBmb2xkZXJcclxuICBjb25zdCBvcmRlcnNQYXRoID0gJy4vb3JkZXJzJztcclxuICBpZiAoIWZzLmV4aXN0c1N5bmMob3JkZXJzUGF0aCkpIHRocm93IG5ldyBFcnJvcign4p2MIE9yZGVycyBmb2xkZXIgbm90IGZvdW5kJyk7XHJcbiAgY29uc3QgZmlsZXMgPSBmcy5yZWFkZGlyU3luYyhvcmRlcnNQYXRoKTtcclxuICBpZiAoIWZpbGVzLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCfinYwgTm8gb3JkZXIgZmlsZXMgZm91bmQgaW4gb3JkZXJzIGZvbGRlcicpO1xyXG4gIGNvbnNvbGUubG9nKCfinIUgT3JkZXIgc2F2ZWQgbG9jYWxseTonLCBmaWxlc1tmaWxlcy5sZW5ndGggLSAxXSk7XHJcblxyXG4gIC8vIDkuIFZlcmlmeSBJRHMgaGF2ZSBubyBoeXBoZW5zXHJcbiAgY29uc3QgbGF0ZXN0T3JkZXJQYXRoID0gYCR7b3JkZXJzUGF0aH0vJHtmaWxlc1tmaWxlcy5sZW5ndGggLSAxXX1gO1xyXG4gIGNvbnN0IG9yZGVyRGF0YSA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKGxhdGVzdE9yZGVyUGF0aCwgJ3V0ZjgnKSk7XHJcbiAgY29uc3QgaWRzV2l0aEh5cGhlbnMgPSBvcmRlckRhdGEuaXRlbXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5pZC5pbmNsdWRlcygnLScpKTtcclxuICBpZiAoaWRzV2l0aEh5cGhlbnMubGVuZ3RoID4gMCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGDinYwgRm91bmQgSURzIHdpdGggaHlwaGVuczogJHtpZHNXaXRoSHlwaGVucy5tYXAoaSA9PiBpLmlkKS5qb2luKCcsICcpfWApO1xyXG4gIH1cclxuICBjb25zb2xlLmxvZygn4pyFIEFsbCBJRHMgaGF2ZSBzcGFjZXMgaW5zdGVhZCBvZiBoeXBoZW5zJyk7XHJcblxyXG4gIC8vIDEwLiBQb3N0Z3JlU1FMIERCIHZlcmlmaWNhdGlvblxyXG4gIGNvbnN0IGNsaWVudCA9IG5ldyBDbGllbnQoe1xyXG4gICAgaG9zdDogcHJvY2Vzcy5lbnYuUEdIT1NULFxyXG4gICAgcG9ydDogcHJvY2Vzcy5lbnYuUEdQT1JULFxyXG4gICAgZGF0YWJhc2U6IHByb2Nlc3MuZW52LlBHREFUQUJBU0UsXHJcbiAgICB1c2VyOiBwcm9jZXNzLmVudi5QR1VTRVIsXHJcbiAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuUEdQQVNTV09SRCxcclxuICB9KTtcclxuXHJcbiAgdHJ5IHtcclxuICAgIGF3YWl0IGNsaWVudC5jb25uZWN0KCk7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCBjbGllbnQucXVlcnkoJ1NFTEVDVCBvcmRlcl9pZCwgc3VibWl0dGVkX2F0IEZST00gb3JkZXJzIE9SREVSIEJZIHN1Ym1pdHRlZF9hdCBERVNDIExJTUlUIDEnKTtcclxuICAgIGlmIChyZXMucm93cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCfinYwgTm8gb3JkZXJzIGZvdW5kIGluIFBvc3RncmVTUUwnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgTGF0ZXN0IG9yZGVyIGluIFBvc3RncmVTUUw6JywgcmVzLnJvd3NbMF0pO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgY29uc29sZS53YXJuKCfimqDvuI8gUG9zdGdyZVNRTCBjaGVjayBmYWlsZWQ6JywgZXJyLm1lc3NhZ2UpO1xyXG4gIH0gZmluYWxseSB7XHJcbiAgICBhd2FpdCBjbGllbnQuZW5kKCk7XHJcbiAgfVxyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU07RUFBRUEsSUFBSTtFQUFFQztBQUFPLENBQUMsR0FBR0MsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQ3BELE1BQU1DLEVBQUUsR0FBR0QsT0FBTyxDQUFDLElBQUksQ0FBQztBQUN4QixNQUFNO0VBQUVFO0FBQU8sQ0FBQyxHQUFHRixPQUFPLENBQUMsSUFBSSxDQUFDO0FBRWhDRixJQUFJLENBQUMsbUNBQW1DLEVBQUUsT0FBTztFQUFFSztBQUFLLENBQUMsS0FBSztFQUM1RCxNQUFNQyxPQUFPLEdBQUcsdUJBQXVCOztFQUV2QztFQUNBLE1BQU1ELElBQUksQ0FBQ0UsSUFBSSxDQUFDLEdBQUdELE9B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