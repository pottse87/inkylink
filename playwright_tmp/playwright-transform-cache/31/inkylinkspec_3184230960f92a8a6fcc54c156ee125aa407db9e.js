"use strict";

const {
  test,
  expect
} = require('@playwright/test');
const fs = require('fs');
test('Inkylink full pipeline', async ({
  page
}) => {
  const baseUrl = 'http://localhost:3000';
  const testEmail = 'test_' + Date.now() + '@example.com';

  // 1. Go to pricing page
  await page.goto(`${baseUrl}/pricing`);

  // ✅ Verify page loaded by checking H1 header text
  await expect(page.locator('h1')).toContainText('Inkylink');

  // 2. Click first "Order Now"
  await page.locator('text=Order Now').first().click();

  // 3. Confirmation page
  await expect(page).toHaveURL(/confirmation/);

  // 4. Continue to form
  await page.locator('text=Continue to Intake Form').click();

  // 5. Fill all inputs
  const inputs = page.locator('input[type="text"]');
  const count = await inputs.count();
  for (let i = 0; i < count; i++) {
    await inputs.nth(i).fill(`Sample answer ${i + 1}`);
  }

  // 6. Submit form
  await page.locator('text=Submit').click();

  // 7. Thank you page
  await expect(page).toHaveURL(/thankyou/);

  // 8. Verify local orders folder
  const ordersPath = './orders';
  if (!fs.existsSync(ordersPath)) throw new Error('❌ Orders folder not found');
  const files = fs.readdirSync(ordersPath);
  if (!files.length) throw new Error('❌ No order files found in orders folder');
  console.log('✅ Order saved locally:', files[files.length - 1]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0ZXN0IiwiZXhwZWN0IiwicmVxdWlyZSIsImZzIiwicGFnZSIsImJhc2VVcmwiLCJ0ZXN0RW1haWwiLCJEYXRlIiwibm93IiwiZ290byIsImxvY2F0b3IiLCJ0b0NvbnRhaW5UZXh0IiwiZmlyc3QiLCJjbGljayIsInRvSGF2ZVVSTCIsImlucHV0cyIsImNvdW50IiwiaSIsIm50aCIsImZpbGwiLCJvcmRlcnNQYXRoIiwiZXhpc3RzU3luYyIsIkVycm9yIiwiZmlsZXMiLCJyZWFkZGlyU3luYyIsImxlbmd0aCIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlcyI6WyJpbmt5bGluay5zcGVjLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgdGVzdCwgZXhwZWN0IH0gPSByZXF1aXJlKCdAcGxheXdyaWdodC90ZXN0Jyk7XHJcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcclxuXHJcbnRlc3QoJ0lua3lsaW5rIGZ1bGwgcGlwZWxpbmUnLCBhc3luYyAoeyBwYWdlIH0pID0+IHtcclxuICBjb25zdCBiYXNlVXJsID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMCc7XHJcbiAgY29uc3QgdGVzdEVtYWlsID0gJ3Rlc3RfJyArIERhdGUubm93KCkgKyAnQGV4YW1wbGUuY29tJztcclxuXHJcbiAgLy8gMS4gR28gdG8gcHJpY2luZyBwYWdlXHJcbiAgYXdhaXQgcGFnZS5nb3RvKGAke2Jhc2VVcmx9L3ByaWNpbmdgKTtcclxuXHJcbiAgLy8g4pyFIFZlcmlmeSBwYWdlIGxvYWRlZCBieSBjaGVja2luZyBIMSBoZWFkZXIgdGV4dFxyXG4gIGF3YWl0IGV4cGVjdChwYWdlLmxvY2F0b3IoJ2gxJykpLnRvQ29udGFpblRleHQoJ0lua3lsaW5rJyk7XHJcblxyXG4gIC8vIDIuIENsaWNrIGZpcnN0IFwiT3JkZXIgTm93XCJcclxuICBhd2FpdCBwYWdlLmxvY2F0b3IoJ3RleHQ9T3JkZXIgTm93JykuZmlyc3QoKS5jbGljaygpO1xyXG5cclxuICAvLyAzLiBDb25maXJtYXRpb24gcGFnZVxyXG4gIGF3YWl0IGV4cGVjdChwYWdlKS50b0hhdmVVUkwoL2NvbmZpcm1hdGlvbi8pO1xyXG5cclxuICAvLyA0LiBDb250aW51ZSB0byBmb3JtXHJcbiAgYXdhaXQgcGFnZS5sb2NhdG9yKCd0ZXh0PUNvbnRpbnVlIHRvIEludGFrZSBGb3JtJykuY2xpY2soKTtcclxuXHJcbiAgLy8gNS4gRmlsbCBhbGwgaW5wdXRzXHJcbiAgY29uc3QgaW5wdXRzID0gcGFnZS5sb2NhdG9yKCdpbnB1dFt0eXBlPVwidGV4dFwiXScpO1xyXG4gIGNvbnN0IGNvdW50ID0gYXdhaXQgaW5wdXRzLmNvdW50KCk7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICBhd2FpdCBpbnB1dHMubnRoKGkpLmZpbGwoYFNhbXBsZSBhbnN3ZXIgJHtpICsgMX1gKTtcclxuICB9XHJcblxyXG4gIC8vIDYuIFN1Ym1pdCBmb3JtXHJcbiAgYXdhaXQgcGFnZS5sb2NhdG9yKCd0ZXh0PVN1Ym1pdCcpLmNsaWNrKCk7XHJcblxyXG4gIC8vIDcuIFRoYW5rIHlvdSBwYWdlXHJcbiAgYXdhaXQgZXhwZWN0KHBhZ2UpLnRvSGF2ZVVSTCgvdGhhbmt5b3UvKTtcclxuXHJcbiAgLy8gOC4gVmVyaWZ5IGxvY2FsIG9yZGVycyBmb2xkZXJcclxuICBjb25zdCBvcmRlcnNQYXRoID0gJy4vb3JkZXJzJztcclxuICBpZiAoIWZzLmV4aXN0c1N5bmMob3JkZXJzUGF0aCkpIHRocm93IG5ldyBFcnJvcign4p2MIE9yZGVycyBmb2xkZXIgbm90IGZvdW5kJyk7XHJcbiAgY29uc3QgZmlsZXMgPSBmcy5yZWFkZGlyU3luYyhvcmRlcnNQYXRoKTtcclxuICBpZiAoIWZpbGVzLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCfinYwgTm8gb3JkZXIgZmlsZXMgZm91bmQgaW4gb3JkZXJzIGZvbGRlcicpO1xyXG4gIGNvbnNvbGUubG9nKCfinIUgT3JkZXIgc2F2ZWQgbG9jYWxseTonLCBmaWxlc1tmaWxlcy5sZW5ndGggLSAxXSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTTtFQUFFQSxJQUFJO0VBQUVDO0FBQU8sQ0FBQyxHQUFHQyxPQUFPLENBQUMsa0JBQWtCLENBQUM7QUFDcEQsTUFBTUMsRUFBRSxHQUFHRCxPQUFPLENBQUMsSUFBSSxDQUFDO0FBRXhCRixJQUFJLENBQUMsd0JBQXdCLEVBQUUsT0FBTztFQUFFSTtBQUFLLENBQUMsS0FBSztFQUNqRCxNQUFNQyxPQUFPLEdBQUcsdUJBQXVCO0VBQ3ZDLE1BQU1DLFNBQVMsR0FBRyxPQUFPLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLENBQUMsR0FBRyxjQUFjOztFQUV2RDtFQUNBLE1BQU1KLElBQUksQ0FBQ0ssSUFBSSxDQUFDLEdBQUdKLE9BQU8sVUFBVSxDQUFDOztFQUVyQztFQUNBLE1BQU1KLE1BQU0sQ0FBQ0csSUFBSSxDQUFDTSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQ0MsYUFBYSxDQUFDLFVBQVUsQ0FBQzs7RUFFMUQ7RUFDQSxNQUFNUCxJQUFJLENBQUNNLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDRSxLQUFLLENBQUMsQ0FBQyxDQUFDQyxLQUFLLENBQUMsQ0FBQzs7RUFFcEQ7RUFDQSxNQUFNWixNQUFNLENBQUNHLElBQUksQ0FBQyxDQUFDVSxTQUFTLENBQUMsY0FBYyxDQUFDOztFQUU1QztFQUNBLE1BQU1WLElBQUksQ0FBQ00sT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUNHLEtBQUssQ0FBQyxDQUFDOztFQUUxRDtFQUNBLE1BQU1FLE1BQU0sR0FBR1gsSUFBSSxDQUFDTSxPQUFPLENBQUMsb0JBQW9CLENBQUM7RUFDakQsTUFBTU0sS0FBSyxHQUFHLE1BQU1ELE1BQU0sQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDbEMsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdELEtBQUssRUFBRUMsQ0FBQyxFQUFFLEVBQUU7SUFDOUIsTUFBTUYsTUFBTSxDQUFDRyxHQUFHLENBQUNELENBQUMsQ0FBQyxDQUFDRSxJQUFJLENBQUMsaUJBQWlCRixDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7RUFDcEQ7O0VBRUE7RUFDQSxNQUFNYixJQUFJLENBQUNNLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQ0csS0FBSyxDQUFDLENBQUM7O0VBRXpDO0VBQ0EsTUFBTVosTUFBTSxDQUFDRyxJQUFJLENBQUMsQ0FBQ1UsU0FBUyxDQUFDLFVBQVUsQ0FBQzs7RUFFeEM7RUFDQSxNQUFNTSxVQUFVLEdBQUcsVUFBVTtFQUM3QixJQUFJLENBQUNqQixFQUFFLENBQUNrQixVQUFVLENBQUNELFVBQVUsQ0FBQyxFQUFFLE1BQU0sSUFBSUUsS0FBSyxDQUFDLDJCQUEyQixDQUFDO0VBQzVFLE1BQU1DLEtBQUssR0FBR3BCLEVBQUUsQ0FBQ3FCLFdBQVcsQ0FBQ0osVUFBVSxDQUFDO0VBQ3hDLElBQUksQ0FBQ0csS0FBSyxDQUFDRSxNQUFNLEVBQUUsTUFBTSxJQUFJSCxLQUFLLENBQUMseUNBQXlDLENBQUM7RUFDN0VJLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHdCQUF3QixFQUFFSixLQUFLLENBQUNBLEtBQUssQ0FBQ0UsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==