"use strict";

const {
  test,
  expect
} = require('@playwright/test');
const fs = require('fs');
const {
  Client
} = require('pg');
test('Inkylink full pipeline + DB check', async ({
  page
}) => {
  const baseUrl = 'http://localhost:3000';

  // 1. Go to pricing page
  await page.goto(`${baseUrl}/pricing`);
  await expect(page.locator('h1')).toContainText('Inkylink');

  // 2. Click first "Order Now"
  await page.locator('text=Order Now').first().click();

  // 3. Confirmation page
  await expect(page).toHaveURL(/confirmation/);

  // 4. Continue to form
  await page.locator('text=Continue to Intake Form').click();

  // 5. Fill all inputs
  const inputs = page.locator('input[type="text"]');
  const count = await inputs.count();
  for (let i = 0; i < count; i++) {
    await inputs.nth(i).fill(`Sample answer ${i + 1}`);
  }

  // 6. Submit form
  await page.locator('text=Submit').click();

  // 7. Thank you page
  await expect(page).toHaveURL(/thankyou/);

  // 8. Verify local orders folder
  const ordersPath = './orders';
  if (!fs.existsSync(ordersPath)) throw new Error('❌ Orders folder not found');
  const files = fs.readdirSync(ordersPath);
  if (!files.length) throw new Error('❌ No order files found in orders folder');
  console.log('✅ Order saved locally:', files[files.length - 1]);

  // 9. Verify IDs have no hyphens
  const latestOrderPath = `${ordersPath}/${files[files.length - 1]}`;
  const orderData = JSON.parse(fs.readFileSync(latestOrderPath, 'utf8'));
  const idsWithHyphens = Array.isArray(orderData.items) ? orderData.items.filter(item => item.id.includes("-")) : [];
  if (!Array.isArray(orderData.items)) {
    console.warn("?? No items array found in latest order file.");
  }
  if (idsWithHyphens.length > 0) {
    throw new Error(`❌ Found IDs with hyphens: ${idsWithHyphens.map(i => i.id).join(', ')}`);
  }
  console.log('✅ All IDs have spaces instead of hyphens');

  // 10. PostgreSQL DB verification
  const client = new Client({
    host: process.env.PGHOST,
    port: process.env.PGPORT,
    database: process.env.PGDATABASE,
    user: process.env.PGUSER,
    password: process.env.PGPASSWORD
  });
  try {
    await client.connect();
    const res = await client.query('SELECT order_id, submitted_at FROM orders ORDER BY submitted_at DESC LIMIT 1');
    if (res.rows.length === 0) {
      throw new Error('❌ No orders found in PostgreSQL');
    } else {
      console.log('✅ Latest order in PostgreSQL:', res.rows[0]);
    }
  } catch (err) {
    console.warn('⚠️ PostgreSQL check failed:', err.message);
  } finally {
    await client.end();
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,