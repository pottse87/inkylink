"use strict";

const {
  test,
  expect
} = require('@playwright/test');
const fs = require('fs');
const {
  Client
} = require('pg');
test('Inkylink full pipeline', async ({
  page
}) => {
  const baseUrl = 'http://localhost:3000';
  const testEmail = 'test_' + Date.now() + '@example.com';

  // 1. Go to pricing page
  await page.goto(`${baseUrl}/pricing`);
  await expect(page).toHaveTitle(/Inkylink/);

  // 2. Click first "Order Now"
  await page.locator('text=Order Now').first().click();

  // 3. Confirmation page
  await expect(page).toHaveURL(/confirmation/);

  // 4. Continue to form
  await page.locator('text=Continue to Intake Form').click();

  // 5. Fill all inputs
  const inputs = page.locator('input[type="text"]');
  const count = await inputs.count();
  for (let i = 0; i < count; i++) {
    await inputs.nth(i).fill(`Sample answer ${i + 1}`);
  }

  // 6. Submit form
  await page.locator('text=Submit').click();

  // 7. Thank you page
  await expect(page).toHaveURL(/thankyou/);

  // 8. Verify local orders folder
  const ordersPath = './orders';
  if (!fs.existsSync(ordersPath)) throw new Error('❌ Orders folder not found');
  const files = fs.readdirSync(ordersPath);
  if (!files.length) throw new Error('❌ No order files found in orders folder');
  console.log('✅ Order saved locally:', files[files.length - 1]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0ZXN0IiwiZXhwZWN0IiwicmVxdWlyZSIsImZzIiwiQ2xpZW50IiwicGFnZSIsImJhc2VVcmwiLCJ0ZXN0RW1haWwiLCJEYXRlIiwibm93IiwiZ290byIsInRvSGF2ZVRpdGxlIiwibG9jYXRvciIsImZpcnN0IiwiY2xpY2siLCJ0b0hhdmVVUkwiLCJpbnB1dHMiLCJjb3VudCIsImkiLCJudGgiLCJmaWxsIiwib3JkZXJzUGF0aCIsImV4aXN0c1N5bmMiLCJFcnJvciIsImZpbGVzIiwicmVhZGRpclN5bmMiLCJsZW5ndGgiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZXMiOlsiaW5reWxpbmsuc3BlYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IHRlc3QsIGV4cGVjdCB9ID0gcmVxdWlyZSgnQHBsYXl3cmlnaHQvdGVzdCcpO1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XHJcbmNvbnN0IHsgQ2xpZW50IH0gPSByZXF1aXJlKCdwZycpO1xyXG5cclxudGVzdCgnSW5reWxpbmsgZnVsbCBwaXBlbGluZScsIGFzeW5jICh7IHBhZ2UgfSkgPT4ge1xyXG4gIGNvbnN0IGJhc2VVcmwgPSAnaHR0cDovL2xvY2FsaG9zdDozMDAwJztcclxuICBjb25zdCB0ZXN0RW1haWwgPSAndGVzdF8nICsgRGF0ZS5ub3coKSArICdAZXhhbXBsZS5jb20nO1xyXG5cclxuICAvLyAxLiBHbyB0byBwcmljaW5nIHBhZ2VcclxuICBhd2FpdCBwYWdlLmdvdG8oYCR7YmFzZVVybH0vcHJpY2luZ2ApO1xyXG4gIGF3YWl0IGV4cGVjdChwYWdlKS50b0hhdmVUaXRsZSgvSW5reWxpbmsvKTtcclxuXHJcbiAgLy8gMi4gQ2xpY2sgZmlyc3QgXCJPcmRlciBOb3dcIlxyXG4gIGF3YWl0IHBhZ2UubG9jYXRvcigndGV4dD1PcmRlciBOb3cnKS5maXJzdCgpLmNsaWNrKCk7XHJcblxyXG4gIC8vIDMuIENvbmZpcm1hdGlvbiBwYWdlXHJcbiAgYXdhaXQgZXhwZWN0KHBhZ2UpLnRvSGF2ZVVSTCgvY29uZmlybWF0aW9uLyk7XHJcblxyXG4gIC8vIDQuIENvbnRpbnVlIHRvIGZvcm1cclxuICBhd2FpdCBwYWdlLmxvY2F0b3IoJ3RleHQ9Q29udGludWUgdG8gSW50YWtlIEZvcm0nKS5jbGljaygpO1xyXG5cclxuICAvLyA1LiBGaWxsIGFsbCBpbnB1dHNcclxuICBjb25zdCBpbnB1dHMgPSBwYWdlLmxvY2F0b3IoJ2lucHV0W3R5cGU9XCJ0ZXh0XCJdJyk7XHJcbiAgY29uc3QgY291bnQgPSBhd2FpdCBpbnB1dHMuY291bnQoKTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgIGF3YWl0IGlucHV0cy5udGgoaSkuZmlsbChgU2FtcGxlIGFuc3dlciAke2kgKyAxfWApO1xyXG4gIH1cclxuXHJcbiAgLy8gNi4gU3VibWl0IGZvcm1cclxuICBhd2FpdCBwYWdlLmxvY2F0b3IoJ3RleHQ9U3VibWl0JykuY2xpY2soKTtcclxuXHJcbiAgLy8gNy4gVGhhbmsgeW91IHBhZ2VcclxuICBhd2FpdCBleHBlY3QocGFnZSkudG9IYXZlVVJMKC90aGFua3lvdS8pO1xyXG5cclxuICAvLyA4LiBWZXJpZnkgbG9jYWwgb3JkZXJzIGZvbGRlclxyXG4gIGNvbnN0IG9yZGVyc1BhdGggPSAnLi9vcmRlcnMnO1xyXG4gIGlmICghZnMuZXhpc3RzU3luYyhvcmRlcnNQYXRoKSkgdGhyb3cgbmV3IEVycm9yKCfinYwgT3JkZXJzIGZvbGRlciBub3QgZm91bmQnKTtcclxuICBjb25zdCBmaWxlcyA9IGZzLnJlYWRkaXJTeW5jKG9yZGVyc1BhdGgpO1xyXG4gIGlmICghZmlsZXMubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ+KdjCBObyBvcmRlciBmaWxlcyBmb3VuZCBpbiBvcmRlcnMgZm9sZGVyJyk7XHJcbiAgY29uc29sZS5sb2coJ+KchSBPcmRlciBzYXZlZCBsb2NhbGx5OicsIGZpbGVzW2ZpbGVzLmxlbmd0aCAtIDFdKTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNO0VBQUVBLElBQUk7RUFBRUM7QUFBTyxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztBQUNwRCxNQUFNQyxFQUFFLEdBQUdELE9BQU8sQ0FBQyxJQUFJLENBQUM7QUFDeEIsTUFBTTtFQUFFRTtBQUFPLENBQUMsR0FBR0YsT0FBTyxDQUFDLElBQUksQ0FBQztBQUVoQ0YsSUFBSSxDQUFDLHdCQUF3QixFQUFFLE9BQU87RUFBRUs7QUFBSyxDQUFDLEtBQUs7RUFDakQsTUFBTUMsT0FBTyxHQUFHLHVCQUF1QjtFQUN2QyxNQUFNQyxTQUFTLEdBQUcsT0FBTyxHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsY0FBYzs7RUFFdkQ7RUFDQSxNQUFNSixJQUFJLENBQUNLLElBQUksQ0FBQyxHQUFHSixPQUFPLFVBQVUsQ0FBQztFQUNyQyxNQUFNTCxNQUFNLENBQUNJLElBQUksQ0FBQyxDQUFDTSxXQUFXLENBQUMsVUFBVSxDQUFDOztFQUUxQztFQUNBLE1BQU1OLElBQUksQ0FBQ08sT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUNDLEtBQUssQ0FBQyxDQUFDLENBQUNDLEtBQUssQ0FBQyxDQUFDOztFQUVwRDtFQUNBLE1BQU1iLE1BQU0sQ0FBQ0ksSUFBSSxDQUFDLENBQUNVLFNBQVMsQ0FBQyxjQUFjLENBQUM7O0VBRTVDO0VBQ0EsTUFBTVYsSUFBSSxDQUFDTyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQ0UsS0FBSyxDQUFDLENBQUM7O0VBRTFEO0VBQ0EsTUFBTUUsTUFBTSxHQUFHWCxJQUFJLENBQUNPLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQztFQUNqRCxNQUFNSyxLQUFLLEdBQUcsTUFBTUQsTUFBTSxDQUFDQyxLQUFLLENBQUMsQ0FBQztFQUNsQyxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0QsS0FBSyxFQUFFQyxDQUFDLEVBQUUsRUFBRTtJQUM5QixNQUFNRixNQUFNLENBQUNHLEdBQUcsQ0FBQ0QsQ0FBQyxDQUFDLENBQUNFLElBQUksQ0FBQyxpQkFBaUJGLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztFQUNwRDs7RUFFQTtFQUNBLE1BQU1iLElBQUksQ0FBQ08sT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDRSxLQUFLLENBQUMsQ0FBQzs7RUFFekM7RUFDQSxNQUFNYixNQUFNLENBQUNJLElBQUksQ0FBQyxDQUFDVSxTQUFTLENBQUMsVUFBVSxDQUFDOztFQUV4QztFQUNBLE1BQU1NLFVBQVUsR0FBRyxVQUFVO0VBQzdCLElBQUksQ0FBQ2xCLEVBQUUsQ0FBQ21CLFVBQVUsQ0FBQ0QsVUFBVSxDQUFDLEVBQUUsTUFBTSxJQUFJRSxLQUFLLENBQUMsMkJBQTJCLENBQUM7RUFDNUUsTUFBTUMsS0FBSyxHQUFHckIsRUFBRSxDQUFDc0IsV0FBVyxDQUFDSixVQUFVLENBQUM7RUFDeEMsSUFBSSxDQUFDRyxLQUFLLENBQUNFLE1BQU0sRUFBRSxNQUFNLElBQUlILEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQztFQUM3RUksT0FBTyxDQUFDQyxHQUFHLENBQUMsd0JBQXdCLEVBQUVKLEtBQUssQ0FBQ0EsS0FBSyxDQUFDRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDaEUsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119